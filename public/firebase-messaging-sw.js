// L√† m·ªôt Service Worker Script do Firebase y√™u c·∫ßu khi b·∫°n d√πng Firebase Cloud Messaging (FCM) cho Web Push Notifications.
// N√≥ ch·∫°y ng·∫ßm trong tr√¨nh duy·ªát (background), kh√¥ng ph·ª• thu·ªôc v√†o app React Native Web c·ªßa b·∫°n ƒëang m·ªü hay kh√¥ng.
// Gi√∫p nh·∫≠n v√† hi·ªÉn th·ªã notification ngay c·∫£ khi user kh√¥ng m·ªü trang web.

// Import Firebase SDK d√†nh cho service worker.
importScripts('https://www.gstatic.com/firebasejs/10.8.1/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/10.8.1/firebase-messaging-compat.js');

// Kh·ªüi t·∫°o app Firebase b√™n trong service worker.
firebase.initializeApp({
  apiKey: "AIzaSyDneBlZzfrW08qLbZBPt4zEOl2DgEvux2E",
  authDomain: "expo-web-push.firebaseapp.com",
  projectId: "expo-web-push",
  messagingSenderId: "1061754689798",
  appId: "1:1061754689798:web:1d5c56c8c83a6243ab2687",
});

// L·∫•y ƒë·ªëi t∆∞·ª£ng FCM ƒë·ªÉ x·ª≠ l√Ω message.
const messaging = firebase.messaging();

// X·ª≠ l√Ω message khi trang web ƒëang t·∫Øt ho·∫∑c kh√¥ng focus.
messaging.onBackgroundMessage(function (payload) {
  console.log("[firebase-messaging-sw.js] Received background message ", payload);
  const notificationTitle = payload.notification.title;
  const { notificationUrl } = payload.data?.url;
  const notificationOptions = {
    body: payload.notification.body,
    data: payload.data.url,
    icon: "../assets/icon.png",
    requireInteraction: true // üëà Notification s·∫Ω kh√¥ng t·ª± ƒë√≥ng
  };

  console.log('üîï Background message:', payload);
  console.log("[firebase-messaging-sw.js] showNotification ", notificationTitle, notificationUrl, notificationOptions);
  // Hi·ªÉn th·ªã push notification th·ªß c√¥ng v·ªõi ti√™u ƒë·ªÅ v√† n·ªôi dung.
  self.registration.showNotification(notificationTitle, notificationOptions);
});

// Handle click ‚Üí Open new tab with deeplink
self.addEventListener('notificationclick', function(event) {
  const urlToOpen = event.notification.data;
  console.log("[firebase-messaging-sw.js] addEventListener urlToOpen ", urlToOpen);
  event.notification.close();

  if (urlToOpen) {
    // M·ªü tab m·ªõi v·ªõi deeplink
    event.waitUntil(
      clients.matchAll({ type: 'window', includeUncontrolled: true }).then(windowClients => {
        for (const client of windowClients) {
          // if ('focus' in client) {
          //   client.navigate(urlToOpen);
          //   return client.focus();
          // }
          // N·∫øu tab ƒëang m·ªü c√≥ c√πng origin, chuy·ªÉn h∆∞·ªõng b·∫±ng postMessage
          if (client.url.includes(self.location.origin) && 'focus' in client) {
            client.postMessage({ type: 'navigate', url: urlToOpen });
            return client.focus();
          }
        }
        // N·∫øu ch∆∞a c√≥ tab m·ªü, m·ªü tab m·ªõi
        if (clients.openWindow) {
          console.log("[firebase-messaging-sw.js] addEventListener openWindow ", client.url);
      
          return clients.openWindow(urlToOpen);
        }
      })
    );

    // event.waitUntil(
    //   clients.openWindow(urlToOpen)
    // );
  }
});
